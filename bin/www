#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("demo:server");
var http = require("http");

var https = require("https");
var fs = require("fs");

// let args = process.argv.splice(2);
// console.log("启动参数可选-dev,当前参数：" + args);
// global.production = args.findIndex(obj => obj == "-dev") == -1;
// console.log(global.production);

var port = normalizePort(process.env.PORT || "3006");
// app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app.callback());

if (process.env.NODE_ENV === "production") {
  //同步读取密钥和签名证书(https)
  var options = {
    // key: fs.readFileSync("./key/2910531_talatan.com.key"),
    // cert: fs.readFileSync("./key/2910531_talatan.com.pem")
    key: fs.readFileSync("/root/secret/2_www.codingyang.com.key"),
    cert: fs.readFileSync("/root/secret/1_www.codingyang.com_bundle.crt")
  };
  var httpsServer = https.createServer(options, app.callback());

  httpsServer.listen(3007);
  console.log("HTTPS Server start listening on: 3007");
  httpsServer.on("error", onError);
  httpsServer.on("listening", onListening);
}

/**
 * Normalize a port into a number, string, or false.
 */
/**
 * Get port from environment and store in Express.
 */

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
console.log("Server start listening on: " + port);
server.on("error", onError);
server.on("listening", onListening);

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
